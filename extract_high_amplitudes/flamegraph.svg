<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="210855"><g><title>`0x7FFE3E6D504B (42 samples, 0.02%)</title><rect x="0.1043%" y="213" width="0.0199%" height="15" fill="rgb(227,0,7)" fg:x="220" fg:w="42"/><text x="0.3543%" y="223.50"></text></g><g><title>`0x7FFE3E6D692A (42 samples, 0.02%)</title><rect x="0.1043%" y="197" width="0.0199%" height="15" fill="rgb(217,0,24)" fg:x="220" fg:w="42"/><text x="0.3543%" y="207.50"></text></g><g><title>`0x7FFE3E6D69D8 (42 samples, 0.02%)</title><rect x="0.1043%" y="181" width="0.0199%" height="15" fill="rgb(221,193,54)" fg:x="220" fg:w="42"/><text x="0.3543%" y="191.50"></text></g><g><title>`0x7FFE3E6D6B16 (42 samples, 0.02%)</title><rect x="0.1043%" y="165" width="0.0199%" height="15" fill="rgb(248,212,6)" fg:x="220" fg:w="42"/><text x="0.3543%" y="175.50"></text></g><g><title>`0x7FFE3B06D193 (42 samples, 0.02%)</title><rect x="0.1043%" y="149" width="0.0199%" height="15" fill="rgb(208,68,35)" fg:x="220" fg:w="42"/><text x="0.3543%" y="159.50"></text></g><g><title>`0x7FFE3B06D309 (42 samples, 0.02%)</title><rect x="0.1043%" y="133" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="220" fg:w="42"/><text x="0.3543%" y="143.50"></text></g><g><title>`0x7FFE3B06D219 (42 samples, 0.02%)</title><rect x="0.1043%" y="117" width="0.0199%" height="15" fill="rgb(207,160,47)" fg:x="220" fg:w="42"/><text x="0.3543%" y="127.50"></text></g><g><title>`0x7FFE3E731014 (41 samples, 0.02%)</title><rect x="0.1048%" y="101" width="0.0194%" height="15" fill="rgb(228,23,34)" fg:x="221" fg:w="41"/><text x="0.3548%" y="111.50"></text></g><g><title>`0x7FFE3E6C9C58 (65 samples, 0.03%)</title><rect x="0.0996%" y="229" width="0.0308%" height="15" fill="rgb(218,30,26)" fg:x="210" fg:w="65"/><text x="0.3496%" y="239.50"></text></g><g><title>`0x7FFE3E6CC374 (80 samples, 0.04%)</title><rect x="0.0967%" y="245" width="0.0379%" height="15" fill="rgb(220,122,19)" fg:x="204" fg:w="80"/><text x="0.3467%" y="255.50"></text></g><g><title>`0x7FFE3E73D92F (76 samples, 0.04%)</title><rect x="0.1669%" y="245" width="0.0360%" height="15" fill="rgb(250,228,42)" fg:x="352" fg:w="76"/><text x="0.4169%" y="255.50"></text></g><g><title>`0x7FFE3E6D504B (29 samples, 0.01%)</title><rect x="0.2082%" y="149" width="0.0138%" height="15" fill="rgb(240,193,28)" fg:x="439" fg:w="29"/><text x="0.4582%" y="159.50"></text></g><g><title>`0x7FFE3E6D692A (27 samples, 0.01%)</title><rect x="0.2091%" y="133" width="0.0128%" height="15" fill="rgb(216,20,37)" fg:x="441" fg:w="27"/><text x="0.4591%" y="143.50"></text></g><g><title>`0x7FFE3E6D69D8 (27 samples, 0.01%)</title><rect x="0.2091%" y="117" width="0.0128%" height="15" fill="rgb(206,188,39)" fg:x="441" fg:w="27"/><text x="0.4591%" y="127.50"></text></g><g><title>`0x7FFE3E6D6B16 (27 samples, 0.01%)</title><rect x="0.2091%" y="101" width="0.0128%" height="15" fill="rgb(217,207,13)" fg:x="441" fg:w="27"/><text x="0.4591%" y="111.50"></text></g><g><title>`0x7FFE3B06D193 (27 samples, 0.01%)</title><rect x="0.2091%" y="85" width="0.0128%" height="15" fill="rgb(231,73,38)" fg:x="441" fg:w="27"/><text x="0.4591%" y="95.50"></text></g><g><title>`0x7FFE3B06D309 (27 samples, 0.01%)</title><rect x="0.2091%" y="69" width="0.0128%" height="15" fill="rgb(225,20,46)" fg:x="441" fg:w="27"/><text x="0.4591%" y="79.50"></text></g><g><title>`0x7FFE3B06D219 (27 samples, 0.01%)</title><rect x="0.2091%" y="53" width="0.0128%" height="15" fill="rgb(210,31,41)" fg:x="441" fg:w="27"/><text x="0.4591%" y="63.50"></text></g><g><title>`0x7FFE3E731014 (26 samples, 0.01%)</title><rect x="0.2096%" y="37" width="0.0123%" height="15" fill="rgb(221,200,47)" fg:x="442" fg:w="26"/><text x="0.4596%" y="47.50"></text></g><g><title>`0x7FFE3E6C9C58 (41 samples, 0.02%)</title><rect x="0.2073%" y="165" width="0.0194%" height="15" fill="rgb(226,26,5)" fg:x="437" fg:w="41"/><text x="0.4573%" y="175.50"></text></g><g><title>`0x7FFE3E6D7CAB (43 samples, 0.02%)</title><rect x="0.2068%" y="213" width="0.0204%" height="15" fill="rgb(249,33,26)" fg:x="436" fg:w="43"/><text x="0.4568%" y="223.50"></text></g><g><title>`0x7FFE3E6CB041 (43 samples, 0.02%)</title><rect x="0.2068%" y="197" width="0.0204%" height="15" fill="rgb(235,183,28)" fg:x="436" fg:w="43"/><text x="0.4568%" y="207.50"></text></g><g><title>`0x7FFE3E6CC374 (43 samples, 0.02%)</title><rect x="0.2068%" y="181" width="0.0204%" height="15" fill="rgb(221,5,38)" fg:x="436" fg:w="43"/><text x="0.4568%" y="191.50"></text></g><g><title>`0x7FFE3E6D7B44 (44 samples, 0.02%)</title><rect x="0.2068%" y="229" width="0.0209%" height="15" fill="rgb(247,18,42)" fg:x="436" fg:w="44"/><text x="0.4568%" y="239.50"></text></g><g><title>`0x7FFE3E6D504B (28 samples, 0.01%)</title><rect x="0.2286%" y="149" width="0.0133%" height="15" fill="rgb(241,131,45)" fg:x="482" fg:w="28"/><text x="0.4786%" y="159.50"></text></g><g><title>`0x7FFE3E6D692A (28 samples, 0.01%)</title><rect x="0.2286%" y="133" width="0.0133%" height="15" fill="rgb(249,31,29)" fg:x="482" fg:w="28"/><text x="0.4786%" y="143.50"></text></g><g><title>`0x7FFE3E6D69D8 (28 samples, 0.01%)</title><rect x="0.2286%" y="117" width="0.0133%" height="15" fill="rgb(225,111,53)" fg:x="482" fg:w="28"/><text x="0.4786%" y="127.50"></text></g><g><title>`0x7FFE3E6D6B16 (28 samples, 0.01%)</title><rect x="0.2286%" y="101" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="482" fg:w="28"/><text x="0.4786%" y="111.50"></text></g><g><title>`0x7FFE3B06D193 (27 samples, 0.01%)</title><rect x="0.2291%" y="85" width="0.0128%" height="15" fill="rgb(214,148,48)" fg:x="483" fg:w="27"/><text x="0.4791%" y="95.50"></text></g><g><title>`0x7FFE3B06D309 (27 samples, 0.01%)</title><rect x="0.2291%" y="69" width="0.0128%" height="15" fill="rgb(232,36,49)" fg:x="483" fg:w="27"/><text x="0.4791%" y="79.50"></text></g><g><title>`0x7FFE3B06D219 (27 samples, 0.01%)</title><rect x="0.2291%" y="53" width="0.0128%" height="15" fill="rgb(209,103,24)" fg:x="483" fg:w="27"/><text x="0.4791%" y="63.50"></text></g><g><title>`0x7FFE3E731014 (24 samples, 0.01%)</title><rect x="0.2305%" y="37" width="0.0114%" height="15" fill="rgb(229,88,8)" fg:x="486" fg:w="24"/><text x="0.4805%" y="47.50"></text></g><g><title>`0x7FFE3E6D7CAB (39 samples, 0.02%)</title><rect x="0.2276%" y="213" width="0.0185%" height="15" fill="rgb(213,181,19)" fg:x="480" fg:w="39"/><text x="0.4776%" y="223.50"></text></g><g><title>`0x7FFE3E6CB041 (39 samples, 0.02%)</title><rect x="0.2276%" y="197" width="0.0185%" height="15" fill="rgb(254,191,54)" fg:x="480" fg:w="39"/><text x="0.4776%" y="207.50"></text></g><g><title>`0x7FFE3E6CC374 (39 samples, 0.02%)</title><rect x="0.2276%" y="181" width="0.0185%" height="15" fill="rgb(241,83,37)" fg:x="480" fg:w="39"/><text x="0.4776%" y="191.50"></text></g><g><title>`0x7FFE3E6C9C58 (39 samples, 0.02%)</title><rect x="0.2276%" y="165" width="0.0185%" height="15" fill="rgb(233,36,39)" fg:x="480" fg:w="39"/><text x="0.4776%" y="175.50"></text></g><g><title>`0x7FFE3E73DAD6 (86 samples, 0.04%)</title><rect x="0.2063%" y="245" width="0.0408%" height="15" fill="rgb(226,3,54)" fg:x="435" fg:w="86"/><text x="0.4563%" y="255.50"></text></g><g><title>`0x7FFE3E6D7BB5 (41 samples, 0.02%)</title><rect x="0.2276%" y="229" width="0.0194%" height="15" fill="rgb(245,192,40)" fg:x="480" fg:w="41"/><text x="0.4776%" y="239.50"></text></g><g><title>`0x7FFE3E6CB041 (329 samples, 0.16%)</title><rect x="0.0939%" y="261" width="0.1560%" height="15" fill="rgb(238,167,29)" fg:x="198" fg:w="329"/><text x="0.3439%" y="271.50"></text></g><g><title>`0x7FFE1E26165F (40 samples, 0.02%)</title><rect x="0.3106%" y="213" width="0.0190%" height="15" fill="rgb(232,182,51)" fg:x="655" fg:w="40"/><text x="0.5606%" y="223.50"></text></g><g><title>`0x7FFE3E6CD5CC (66 samples, 0.03%)</title><rect x="0.3823%" y="165" width="0.0313%" height="15" fill="rgb(231,60,39)" fg:x="806" fg:w="66"/><text x="0.6323%" y="175.50"></text></g><g><title>`0x7FFE3E6CD5D8 (75 samples, 0.04%)</title><rect x="0.4145%" y="165" width="0.0356%" height="15" fill="rgb(208,69,12)" fg:x="874" fg:w="75"/><text x="0.6645%" y="175.50"></text></g><g><title>`0x7FFE3E730524 (61 samples, 0.03%)</title><rect x="0.4738%" y="149" width="0.0289%" height="15" fill="rgb(235,93,37)" fg:x="999" fg:w="61"/><text x="0.7238%" y="159.50"></text></g><g><title>`0x7FFE3E6CD6DA (82 samples, 0.04%)</title><rect x="0.4728%" y="165" width="0.0389%" height="15" fill="rgb(213,116,39)" fg:x="997" fg:w="82"/><text x="0.7228%" y="175.50"></text></g><g><title>`0x7FFE3E6CD717 (70 samples, 0.03%)</title><rect x="0.5131%" y="165" width="0.0332%" height="15" fill="rgb(222,207,29)" fg:x="1082" fg:w="70"/><text x="0.7631%" y="175.50"></text></g><g><title>`0x7FFE3E6CD813 (26 samples, 0.01%)</title><rect x="0.5468%" y="165" width="0.0123%" height="15" fill="rgb(206,96,30)" fg:x="1153" fg:w="26"/><text x="0.7968%" y="175.50"></text></g><g><title>`0x7FFE3E6D1CF3 (24 samples, 0.01%)</title><rect x="0.5478%" y="149" width="0.0114%" height="15" fill="rgb(218,138,4)" fg:x="1155" fg:w="24"/><text x="0.7978%" y="159.50"></text></g><g><title>`0x7FFE3E6CDB91 (30 samples, 0.01%)</title><rect x="0.5791%" y="165" width="0.0142%" height="15" fill="rgb(250,191,14)" fg:x="1221" fg:w="30"/><text x="0.8291%" y="175.50"></text></g><g><title>`0x7FFE3E6D1974 (44 samples, 0.02%)</title><rect x="0.5976%" y="149" width="0.0209%" height="15" fill="rgb(239,60,40)" fg:x="1260" fg:w="44"/><text x="0.8476%" y="159.50"></text></g><g><title>`0x7FFE3E6D1CF3 (280 samples, 0.13%)</title><rect x="0.6213%" y="133" width="0.1328%" height="15" fill="rgb(206,27,48)" fg:x="1310" fg:w="280"/><text x="0.8713%" y="143.50"></text></g><g><title>`0x7FFE3E6D1B64 (284 samples, 0.13%)</title><rect x="0.6199%" y="149" width="0.1347%" height="15" fill="rgb(225,35,8)" fg:x="1307" fg:w="284"/><text x="0.8699%" y="159.50"></text></g><g><title>`0x7FFE3E6D1B6F (305 samples, 0.14%)</title><rect x="0.7545%" y="149" width="0.1446%" height="15" fill="rgb(250,213,24)" fg:x="1591" fg:w="305"/><text x="1.0045%" y="159.50"></text></g><g><title>`0x7FFE3E6D1CF3 (301 samples, 0.14%)</title><rect x="0.7564%" y="133" width="0.1428%" height="15" fill="rgb(247,123,22)" fg:x="1595" fg:w="301"/><text x="1.0064%" y="143.50"></text></g><g><title>`0x7FFE3E6CDC0F (641 samples, 0.30%)</title><rect x="0.5966%" y="165" width="0.3040%" height="15" fill="rgb(231,138,38)" fg:x="1258" fg:w="641"/><text x="0.8466%" y="175.50"></text></g><g><title>`0x7FFE3E6CCCEA (1,130 samples, 0.54%)</title><rect x="0.3657%" y="181" width="0.5359%" height="15" fill="rgb(231,145,46)" fg:x="771" fg:w="1130"/><text x="0.6157%" y="191.50"></text></g><g><title>`0x7FFE3E6D1B64 (36 samples, 0.02%)</title><rect x="0.9466%" y="101" width="0.0171%" height="15" fill="rgb(251,118,11)" fg:x="1996" fg:w="36"/><text x="1.1966%" y="111.50"></text></g><g><title>`0x7FFE3E6D1CF3 (36 samples, 0.02%)</title><rect x="0.9466%" y="85" width="0.0171%" height="15" fill="rgb(217,147,25)" fg:x="1996" fg:w="36"/><text x="1.1966%" y="95.50"></text></g><g><title>`0x7FFE3E6CCCEA (142 samples, 0.07%)</title><rect x="0.9158%" y="133" width="0.0673%" height="15" fill="rgb(247,81,37)" fg:x="1931" fg:w="142"/><text x="1.1658%" y="143.50"></text></g><g><title>`0x7FFE3E6CDC0F (86 samples, 0.04%)</title><rect x="0.9424%" y="117" width="0.0408%" height="15" fill="rgb(209,12,38)" fg:x="1987" fg:w="86"/><text x="1.1924%" y="127.50"></text></g><g><title>`0x7FFE3E6D1B6F (41 samples, 0.02%)</title><rect x="0.9637%" y="101" width="0.0194%" height="15" fill="rgb(227,1,9)" fg:x="2032" fg:w="41"/><text x="1.2137%" y="111.50"></text></g><g><title>`0x7FFE3E6D1CF3 (41 samples, 0.02%)</title><rect x="0.9637%" y="85" width="0.0194%" height="15" fill="rgb(248,47,43)" fg:x="2032" fg:w="41"/><text x="1.2137%" y="95.50"></text></g><g><title>`0x7FFE3E6D3555 (218 samples, 0.10%)</title><rect x="0.9139%" y="149" width="0.1034%" height="15" fill="rgb(221,10,30)" fg:x="1927" fg:w="218"/><text x="1.1639%" y="159.50"></text></g><g><title>`0x7FFE3E6CD289 (64 samples, 0.03%)</title><rect x="0.9869%" y="133" width="0.0304%" height="15" fill="rgb(210,229,1)" fg:x="2081" fg:w="64"/><text x="1.2369%" y="143.50"></text></g><g><title>`0x7FFE3E6CB041 (50 samples, 0.02%)</title><rect x="1.0235%" y="133" width="0.0237%" height="15" fill="rgb(222,148,37)" fg:x="2158" fg:w="50"/><text x="1.2735%" y="143.50"></text></g><g><title>`0x7FFE3E6D35B2 (54 samples, 0.03%)</title><rect x="1.0220%" y="149" width="0.0256%" height="15" fill="rgb(234,67,33)" fg:x="2155" fg:w="54"/><text x="1.2720%" y="159.50"></text></g><g><title>`0x7FFE3E6D2317 (298 samples, 0.14%)</title><rect x="0.9082%" y="165" width="0.1413%" height="15" fill="rgb(247,98,35)" fg:x="1915" fg:w="298"/><text x="1.1582%" y="175.50"></text></g><g><title>`0x7FFE3E6D21DA (303 samples, 0.14%)</title><rect x="0.9068%" y="181" width="0.1437%" height="15" fill="rgb(247,138,52)" fg:x="1912" fg:w="303"/><text x="1.1568%" y="191.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVecInner (1,512 samples, 0.72%)</title><rect x="0.3377%" y="213" width="0.7171%" height="15" fill="rgb(213,79,30)" fg:x="712" fg:w="1512"/><text x="0.5877%" y="223.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (1,485 samples, 0.70%)</title><rect x="0.3505%" y="197" width="0.7043%" height="15" fill="rgb(246,177,23)" fg:x="739" fg:w="1485"/><text x="0.6005%" y="207.50"></text></g><g><title>cli.exe`core::slice::memchr::contains_zero_byte (50 samples, 0.02%)</title><rect x="1.1477%" y="181" width="0.0237%" height="15" fill="rgb(230,62,27)" fg:x="2420" fg:w="50"/><text x="1.3977%" y="191.50"></text></g><g><title>cli.exe`core::slice::memchr::memchr_aligned (281 samples, 0.13%)</title><rect x="1.0548%" y="213" width="0.1333%" height="15" fill="rgb(216,154,8)" fg:x="2224" fg:w="281"/><text x="1.3048%" y="223.50"></text></g><g><title>cli.exe`core::slice::memchr::memchr_aligned::runtime (271 samples, 0.13%)</title><rect x="1.0595%" y="197" width="0.1285%" height="15" fill="rgb(244,35,45)" fg:x="2234" fg:w="271"/><text x="1.3095%" y="207.50"></text></g><g><title>cli.exe`core::slice::memchr::memchr_naive (35 samples, 0.02%)</title><rect x="1.1714%" y="181" width="0.0166%" height="15" fill="rgb(251,115,12)" fg:x="2470" fg:w="35"/><text x="1.4214%" y="191.50"></text></g><g><title>cli.exe`core::str::converts::from_utf8 (235 samples, 0.11%)</title><rect x="1.1880%" y="213" width="0.1115%" height="15" fill="rgb(240,54,50)" fg:x="2505" fg:w="235"/><text x="1.4380%" y="223.50"></text></g><g><title>cli.exe`core::str::validations::run_utf8_validation (221 samples, 0.10%)</title><rect x="1.1947%" y="197" width="0.1048%" height="15" fill="rgb(233,84,52)" fg:x="2519" fg:w="221"/><text x="1.4447%" y="207.50"></text></g><g><title>`0x7FFE3B21E160 (220 samples, 0.10%)</title><rect x="1.3099%" y="181" width="0.1043%" height="15" fill="rgb(207,117,47)" fg:x="2762" fg:w="220"/><text x="1.5599%" y="191.50"></text></g><g><title>`0x7FFE3B113044 (30 samples, 0.01%)</title><rect x="1.4270%" y="165" width="0.0142%" height="15" fill="rgb(249,43,39)" fg:x="3009" fg:w="30"/><text x="1.6770%" y="175.50"></text></g><g><title>`0x7FFE3B113359 (30 samples, 0.01%)</title><rect x="1.4270%" y="149" width="0.0142%" height="15" fill="rgb(209,38,44)" fg:x="3009" fg:w="30"/><text x="1.6770%" y="159.50"></text></g><g><title>`0x7FFE3B21E191 (52 samples, 0.02%)</title><rect x="1.4171%" y="181" width="0.0247%" height="15" fill="rgb(236,212,23)" fg:x="2988" fg:w="52"/><text x="1.6671%" y="191.50"></text></g><g><title>cli.exe`&lt;std::io::Lines (4,267 samples, 2.02%)</title><rect x="0.2604%" y="245" width="2.0237%" height="15" fill="rgb(242,79,21)" fg:x="549" fg:w="4267"/><text x="0.5104%" y="255.50">c..</text></g><g><title>cli.exe`std::io::append_to_string (4,248 samples, 2.01%)</title><rect x="0.2694%" y="229" width="2.0147%" height="15" fill="rgb(211,96,35)" fg:x="568" fg:w="4248"/><text x="0.5194%" y="239.50">c..</text></g><g><title>cli.exe`std::sys::pal::windows::handle::Handle::read_buf (2,075 samples, 0.98%)</title><rect x="1.2999%" y="213" width="0.9841%" height="15" fill="rgb(253,215,40)" fg:x="2741" fg:w="2075"/><text x="1.5499%" y="223.50"></text></g><g><title>cli.exe`std::sys::pal::windows::handle::Handle::synchronous_read (2,074 samples, 0.98%)</title><rect x="1.3004%" y="197" width="0.9836%" height="15" fill="rgb(211,81,21)" fg:x="2742" fg:w="2074"/><text x="1.5504%" y="207.50"></text></g><g><title>`0x7FFE3E730D14 (1,756 samples, 0.83%)</title><rect x="1.4512%" y="181" width="0.8328%" height="15" fill="rgb(208,190,38)" fg:x="3060" fg:w="1756"/><text x="1.7012%" y="191.50"></text></g><g><title>`0x7FFE3E6CC374 (44 samples, 0.02%)</title><rect x="5.3240%" y="213" width="0.0209%" height="15" fill="rgb(235,213,38)" fg:x="11226" fg:w="44"/><text x="5.5740%" y="223.50"></text></g><g><title>`0x7FFE3E6CB041 (116 samples, 0.06%)</title><rect x="5.3207%" y="229" width="0.0550%" height="15" fill="rgb(237,122,38)" fg:x="11219" fg:w="116"/><text x="5.5707%" y="239.50"></text></g><g><title>`0x7FFE3E6CD525 (31 samples, 0.01%)</title><rect x="5.3900%" y="213" width="0.0147%" height="15" fill="rgb(244,218,35)" fg:x="11365" fg:w="31"/><text x="5.6400%" y="223.50"></text></g><g><title>`0x7FFE3E6CD717 (23 samples, 0.01%)</title><rect x="5.4293%" y="213" width="0.0109%" height="15" fill="rgb(240,68,47)" fg:x="11448" fg:w="23"/><text x="5.6793%" y="223.50"></text></g><g><title>`0x7FFE3E6CCCEA (178 samples, 0.08%)</title><rect x="5.3871%" y="229" width="0.0844%" height="15" fill="rgb(210,16,53)" fg:x="11359" fg:w="178"/><text x="5.6371%" y="239.50"></text></g><g><title>`0x7FFE3E6CDC0F (25 samples, 0.01%)</title><rect x="5.4597%" y="213" width="0.0119%" height="15" fill="rgb(235,124,12)" fg:x="11512" fg:w="25"/><text x="5.7097%" y="223.50"></text></g><g><title>cli.exe`core::num::dec2flt::lemire::compute_float&lt;f64&gt; (40 samples, 0.02%)</title><rect x="5.4952%" y="197" width="0.0190%" height="15" fill="rgb(224,169,11)" fg:x="11587" fg:w="40"/><text x="5.7452%" y="207.50"></text></g><g><title>cli.exe`core::num::dec2flt::parse::try_parse_digits (40 samples, 0.02%)</title><rect x="5.5446%" y="165" width="0.0190%" height="15" fill="rgb(250,166,2)" fg:x="11691" fg:w="40"/><text x="5.7946%" y="175.50"></text></g><g><title>cli.exe`core::num::dec2flt::impl$3::from_str (201 samples, 0.10%)</title><rect x="5.4744%" y="229" width="0.0953%" height="15" fill="rgb(242,216,29)" fg:x="11543" fg:w="201"/><text x="5.7244%" y="239.50"></text></g><g><title>cli.exe`core::num::dec2flt::dec2flt (189 samples, 0.09%)</title><rect x="5.4801%" y="213" width="0.0896%" height="15" fill="rgb(230,116,27)" fg:x="11555" fg:w="189"/><text x="5.7301%" y="223.50"></text></g><g><title>cli.exe`core::num::dec2flt::parse::parse_number (117 samples, 0.06%)</title><rect x="5.5142%" y="197" width="0.0555%" height="15" fill="rgb(228,99,48)" fg:x="11627" fg:w="117"/><text x="5.7642%" y="207.50"></text></g><g><title>cli.exe`core::num::dec2flt::parse::parse_partial_number (55 samples, 0.03%)</title><rect x="5.5436%" y="181" width="0.0261%" height="15" fill="rgb(253,11,6)" fg:x="11689" fg:w="55"/><text x="5.7936%" y="191.50"></text></g><g><title>cli.exe`core::str::pattern::StrSearcher::new (35 samples, 0.02%)</title><rect x="5.5697%" y="229" width="0.0166%" height="15" fill="rgb(247,143,39)" fg:x="11744" fg:w="35"/><text x="5.8197%" y="239.50"></text></g><g><title>cli.exe`core::str::pattern::TwoWaySearcher::new (30 samples, 0.01%)</title><rect x="5.5721%" y="213" width="0.0142%" height="15" fill="rgb(236,97,10)" fg:x="11749" fg:w="30"/><text x="5.8221%" y="223.50"></text></g><g><title>cli.exe`&lt;shared::trace::TraceParser as core::iter::traits::iterator::Iterator&gt;::next (11,275 samples, 5.35%)</title><rect x="0.2514%" y="261" width="5.3473%" height="15" fill="rgb(233,208,19)" fg:x="530" fg:w="11275"/><text x="0.5014%" y="271.50">cli.exe..</text></g><g><title>cli.exe`shared::trace::Trace::from_line (6,989 samples, 3.31%)</title><rect x="2.2840%" y="245" width="3.3146%" height="15" fill="rgb(216,164,2)" fg:x="4816" fg:w="6989"/><text x="2.5340%" y="255.50">cli..</text></g><g><title>`0x7FFE3E6CAFFF (26 samples, 0.01%)</title><rect x="15.7943%" y="245" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="33303" fg:w="26"/><text x="16.0443%" y="255.50"></text></g><g><title>`0x7FFE3E6CB01C (131 samples, 0.06%)</title><rect x="15.8151%" y="245" width="0.0621%" height="15" fill="rgb(242,17,10)" fg:x="33347" fg:w="131"/><text x="16.0651%" y="255.50"></text></g><g><title>`0x7FFE3B06D219 (32 samples, 0.02%)</title><rect x="15.9271%" y="149" width="0.0152%" height="15" fill="rgb(242,107,0)" fg:x="33583" fg:w="32"/><text x="16.1771%" y="159.50"></text></g><g><title>`0x7FFE3E731014 (31 samples, 0.01%)</title><rect x="15.9275%" y="133" width="0.0147%" height="15" fill="rgb(251,28,31)" fg:x="33584" fg:w="31"/><text x="16.1775%" y="143.50"></text></g><g><title>`0x7FFE3E6CC374 (39 samples, 0.02%)</title><rect x="15.9242%" y="229" width="0.0185%" height="15" fill="rgb(233,223,10)" fg:x="33577" fg:w="39"/><text x="16.1742%" y="239.50"></text></g><g><title>`0x7FFE3E6CA15C (33 samples, 0.02%)</title><rect x="15.9271%" y="213" width="0.0157%" height="15" fill="rgb(215,21,27)" fg:x="33583" fg:w="33"/><text x="16.1771%" y="223.50"></text></g><g><title>`0x7FFE3E6D6B16 (33 samples, 0.02%)</title><rect x="15.9271%" y="197" width="0.0157%" height="15" fill="rgb(232,23,21)" fg:x="33583" fg:w="33"/><text x="16.1771%" y="207.50"></text></g><g><title>`0x7FFE3B06D193 (33 samples, 0.02%)</title><rect x="15.9271%" y="181" width="0.0157%" height="15" fill="rgb(244,5,23)" fg:x="33583" fg:w="33"/><text x="16.1771%" y="191.50"></text></g><g><title>`0x7FFE3B06D309 (33 samples, 0.02%)</title><rect x="15.9271%" y="165" width="0.0157%" height="15" fill="rgb(226,81,46)" fg:x="33583" fg:w="33"/><text x="16.1771%" y="175.50"></text></g><g><title>`0x7FFE3E6CC3A0 (26 samples, 0.01%)</title><rect x="15.9456%" y="229" width="0.0123%" height="15" fill="rgb(247,70,30)" fg:x="33622" fg:w="26"/><text x="16.1956%" y="239.50"></text></g><g><title>`0x7FFE3E73D830 (50 samples, 0.02%)</title><rect x="15.9764%" y="229" width="0.0237%" height="15" fill="rgb(212,68,19)" fg:x="33687" fg:w="50"/><text x="16.2264%" y="239.50"></text></g><g><title>`0x7FFE3E73D841 (74 samples, 0.04%)</title><rect x="16.0048%" y="229" width="0.0351%" height="15" fill="rgb(240,187,13)" fg:x="33747" fg:w="74"/><text x="16.2548%" y="239.50"></text></g><g><title>`0x7FFE3E73D845 (55 samples, 0.03%)</title><rect x="16.0399%" y="229" width="0.0261%" height="15" fill="rgb(223,113,26)" fg:x="33821" fg:w="55"/><text x="16.2899%" y="239.50"></text></g><g><title>`0x7FFE3E73D85D (145 samples, 0.07%)</title><rect x="16.0736%" y="229" width="0.0688%" height="15" fill="rgb(206,192,2)" fg:x="33892" fg:w="145"/><text x="16.3236%" y="239.50"></text></g><g><title>`0x7FFE3E73D861 (106 samples, 0.05%)</title><rect x="16.1424%" y="229" width="0.0503%" height="15" fill="rgb(241,108,4)" fg:x="34037" fg:w="106"/><text x="16.3924%" y="239.50"></text></g><g><title>`0x7FFE3E73D92F (565 samples, 0.27%)</title><rect x="16.2443%" y="229" width="0.2680%" height="15" fill="rgb(247,173,49)" fg:x="34252" fg:w="565"/><text x="16.4943%" y="239.50"></text></g><g><title>`0x7FFE3E6CB041 (1,369 samples, 0.65%)</title><rect x="15.8867%" y="245" width="0.6493%" height="15" fill="rgb(224,114,35)" fg:x="33498" fg:w="1369"/><text x="16.1367%" y="255.50"></text></g><g><title>`0x7FFE3E6CCCEA (28 samples, 0.01%)</title><rect x="16.5389%" y="245" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="34873" fg:w="28"/><text x="16.7889%" y="255.50"></text></g><g><title>`0x7FFE3E6CCB67 (121 samples, 0.06%)</title><rect x="17.7027%" y="229" width="0.0574%" height="15" fill="rgb(245,172,44)" fg:x="37327" fg:w="121"/><text x="17.9527%" y="239.50"></text></g><g><title>`0x7FFE3E6CCCE5 (61 samples, 0.03%)</title><rect x="17.8227%" y="229" width="0.0289%" height="15" fill="rgb(236,23,11)" fg:x="37580" fg:w="61"/><text x="18.0727%" y="239.50"></text></g><g><title>`0x7FFE3E6CD5B2 (83 samples, 0.04%)</title><rect x="17.8933%" y="213" width="0.0394%" height="15" fill="rgb(205,117,38)" fg:x="37729" fg:w="83"/><text x="18.1433%" y="223.50"></text></g><g><title>`0x7FFE3E6CD5CC (74 samples, 0.04%)</title><rect x="17.9427%" y="213" width="0.0351%" height="15" fill="rgb(237,72,25)" fg:x="37833" fg:w="74"/><text x="18.1927%" y="223.50"></text></g><g><title>`0x7FFE3E6CD5D8 (112 samples, 0.05%)</title><rect x="17.9792%" y="213" width="0.0531%" height="15" fill="rgb(244,70,9)" fg:x="37910" fg:w="112"/><text x="18.2292%" y="223.50"></text></g><g><title>`0x7FFE3E6CD632 (128 samples, 0.06%)</title><rect x="18.0560%" y="213" width="0.0607%" height="15" fill="rgb(217,125,39)" fg:x="38072" fg:w="128"/><text x="18.3060%" y="223.50"></text></g><g><title>`0x7FFE3E6CD6DA (149 samples, 0.07%)</title><rect x="18.1381%" y="213" width="0.0707%" height="15" fill="rgb(235,36,10)" fg:x="38245" fg:w="149"/><text x="18.3881%" y="223.50"></text></g><g><title>`0x7FFE3E6CD717 (206 samples, 0.10%)</title><rect x="18.2234%" y="213" width="0.0977%" height="15" fill="rgb(251,123,47)" fg:x="38425" fg:w="206"/><text x="18.4734%" y="223.50"></text></g><g><title>`0x7FFE3E6D1CF3 (368 samples, 0.17%)</title><rect x="18.3448%" y="197" width="0.1745%" height="15" fill="rgb(221,13,13)" fg:x="38681" fg:w="368"/><text x="18.5948%" y="207.50"></text></g><g><title>`0x7FFE3E6CCCEA (1,409 samples, 0.67%)</title><rect x="17.8516%" y="229" width="0.6682%" height="15" fill="rgb(238,131,9)" fg:x="37641" fg:w="1409"/><text x="18.1016%" y="239.50"></text></g><g><title>`0x7FFE3E6CD813 (393 samples, 0.19%)</title><rect x="18.3335%" y="213" width="0.1864%" height="15" fill="rgb(211,50,8)" fg:x="38657" fg:w="393"/><text x="18.5835%" y="223.50"></text></g><g><title>cli.exe`core::ops::function::impls::&lt;impl core::ops::function::FnMut (107,876 samples, 51.16%)</title><rect x="18.5364%" y="229" width="51.1612%" height="15" fill="rgb(245,182,24)" fg:x="39085" fg:w="107876"/><text x="18.7864%" y="239.50">cli.exe`core::ops::function::impls::&lt;impl core::ops::function::FnMut</text></g><g><title>cli.exe`std::alloc::__default_lib_allocator::__rdl_alloc (32 samples, 0.02%)</title><rect x="69.6977%" y="229" width="0.0152%" height="15" fill="rgb(242,14,37)" fg:x="146961" fg:w="32"/><text x="69.9477%" y="239.50"></text></g><g><title>`0x7FFE3BC23250 (58 samples, 0.03%)</title><rect x="69.7233%" y="197" width="0.0275%" height="15" fill="rgb(246,228,12)" fg:x="147015" fg:w="58"/><text x="69.9733%" y="207.50"></text></g><g><title>`0x7FFE3BC2325D (89 samples, 0.04%)</title><rect x="69.7584%" y="197" width="0.0422%" height="15" fill="rgb(213,55,15)" fg:x="147089" fg:w="89"/><text x="70.0084%" y="207.50"></text></g><g><title>cli.exe`core::intrinsics::unlikely (187 samples, 0.09%)</title><rect x="69.7233%" y="213" width="0.0887%" height="15" fill="rgb(209,9,3)" fg:x="147015" fg:w="187"/><text x="69.9733%" y="223.50"></text></g><g><title>`0x7FFE3C9A0DF0 (24 samples, 0.01%)</title><rect x="69.8006%" y="197" width="0.0114%" height="15" fill="rgb(230,59,30)" fg:x="147178" fg:w="24"/><text x="70.0506%" y="207.50"></text></g><g><title>cli.exe`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter (112,309 samples, 53.26%)</title><rect x="16.5521%" y="245" width="53.2636%" height="15" fill="rgb(209,121,21)" fg:x="34901" fg:w="112309"/><text x="16.8021%" y="255.50">cli.exe`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter</text></g><g><title>cli.exe`std::sys::alloc::windows::process_heap_alloc (217 samples, 0.10%)</title><rect x="69.7128%" y="229" width="0.1029%" height="15" fill="rgb(220,109,13)" fg:x="146993" fg:w="217"/><text x="69.9628%" y="239.50"></text></g><g><title>`0x7FFE3E6CD717 (38 samples, 0.02%)</title><rect x="91.9219%" y="213" width="0.0180%" height="15" fill="rgb(232,18,1)" fg:x="193822" fg:w="38"/><text x="92.1719%" y="223.50"></text></g><g><title>`0x7FFE3E6D1971 (36 samples, 0.02%)</title><rect x="91.9490%" y="197" width="0.0171%" height="15" fill="rgb(215,41,42)" fg:x="193879" fg:w="36"/><text x="92.1990%" y="207.50"></text></g><g><title>`0x7FFE3E6CCCEA (108 samples, 0.05%)</title><rect x="91.9177%" y="229" width="0.0512%" height="15" fill="rgb(224,123,36)" fg:x="193813" fg:w="108"/><text x="92.1677%" y="239.50"></text></g><g><title>`0x7FFE3E6CDC0F (42 samples, 0.02%)</title><rect x="91.9490%" y="213" width="0.0199%" height="15" fill="rgb(240,125,3)" fg:x="193879" fg:w="42"/><text x="92.1990%" y="223.50"></text></g><g><title>`0x7FFE3E6D2B4E (33 samples, 0.02%)</title><rect x="91.9893%" y="165" width="0.0157%" height="15" fill="rgb(205,98,50)" fg:x="193964" fg:w="33"/><text x="92.2393%" y="175.50"></text></g><g><title>`0x7FFE3E6CDB91 (26 samples, 0.01%)</title><rect x="92.0211%" y="133" width="0.0123%" height="15" fill="rgb(205,185,37)" fg:x="194031" fg:w="26"/><text x="92.2711%" y="143.50"></text></g><g><title>`0x7FFE3E6F3668 (26 samples, 0.01%)</title><rect x="92.0211%" y="117" width="0.0123%" height="15" fill="rgb(238,207,15)" fg:x="194031" fg:w="26"/><text x="92.2711%" y="127.50"></text></g><g><title>`0x7FFE3E6D1971 (37 samples, 0.02%)</title><rect x="92.0334%" y="117" width="0.0175%" height="15" fill="rgb(213,199,42)" fg:x="194057" fg:w="37"/><text x="92.2834%" y="127.50"></text></g><g><title>`0x7FFE3E6CDC0F (51 samples, 0.02%)</title><rect x="92.0334%" y="133" width="0.0242%" height="15" fill="rgb(235,201,11)" fg:x="194057" fg:w="51"/><text x="92.2834%" y="143.50"></text></g><g><title>`0x7FFE3E6CCCEA (111 samples, 0.05%)</title><rect x="92.0054%" y="149" width="0.0526%" height="15" fill="rgb(207,46,11)" fg:x="193998" fg:w="111"/><text x="92.2554%" y="159.50"></text></g><g><title>`0x7FFE3E6CFA61 (27 samples, 0.01%)</title><rect x="92.0737%" y="133" width="0.0128%" height="15" fill="rgb(241,35,35)" fg:x="194142" fg:w="27"/><text x="92.3237%" y="143.50"></text></g><g><title>`0x7FFE3E6D5D0B (38 samples, 0.02%)</title><rect x="92.0875%" y="117" width="0.0180%" height="15" fill="rgb(243,32,47)" fg:x="194171" fg:w="38"/><text x="92.3375%" y="127.50"></text></g><g><title>`0x7FFE3E6CD289 (101 samples, 0.05%)</title><rect x="92.0590%" y="149" width="0.0479%" height="15" fill="rgb(247,202,23)" fg:x="194111" fg:w="101"/><text x="92.3090%" y="159.50"></text></g><g><title>`0x7FFE3E6CFC68 (41 samples, 0.02%)</title><rect x="92.0875%" y="133" width="0.0194%" height="15" fill="rgb(219,102,11)" fg:x="194171" fg:w="41"/><text x="92.3375%" y="143.50"></text></g><g><title>`0x7FFE3E6D3555 (216 samples, 0.10%)</title><rect x="92.0049%" y="165" width="0.1024%" height="15" fill="rgb(243,110,44)" fg:x="193997" fg:w="216"/><text x="92.2549%" y="175.50"></text></g><g><title>`0x7FFE3E7378C4 (28 samples, 0.01%)</title><rect x="92.1083%" y="149" width="0.0133%" height="15" fill="rgb(222,74,54)" fg:x="194215" fg:w="28"/><text x="92.3583%" y="159.50"></text></g><g><title>`0x7FFE3E7378C9 (32 samples, 0.02%)</title><rect x="92.1216%" y="149" width="0.0152%" height="15" fill="rgb(216,99,12)" fg:x="194243" fg:w="32"/><text x="92.3716%" y="159.50"></text></g><g><title>`0x7FFE3E7378CE (26 samples, 0.01%)</title><rect x="92.1368%" y="149" width="0.0123%" height="15" fill="rgb(226,22,26)" fg:x="194275" fg:w="26"/><text x="92.3868%" y="159.50"></text></g><g><title>`0x7FFE3E7378D3 (43 samples, 0.02%)</title><rect x="92.1491%" y="149" width="0.0204%" height="15" fill="rgb(217,163,10)" fg:x="194301" fg:w="43"/><text x="92.3991%" y="159.50"></text></g><g><title>`0x7FFE3E7378DE (24 samples, 0.01%)</title><rect x="92.1700%" y="149" width="0.0114%" height="15" fill="rgb(213,25,53)" fg:x="194345" fg:w="24"/><text x="92.4200%" y="159.50"></text></g><g><title>`0x7FFE3E6D35A0 (189 samples, 0.09%)</title><rect x="92.1074%" y="165" width="0.0896%" height="15" fill="rgb(252,105,26)" fg:x="194213" fg:w="189"/><text x="92.3574%" y="175.50"></text></g><g><title>`0x7FFE3E6D35B2 (30 samples, 0.01%)</title><rect x="92.1970%" y="165" width="0.0142%" height="15" fill="rgb(220,39,43)" fg:x="194402" fg:w="30"/><text x="92.4470%" y="175.50"></text></g><g><title>`0x7FFE3E6CB041 (30 samples, 0.01%)</title><rect x="92.1970%" y="149" width="0.0142%" height="15" fill="rgb(229,68,48)" fg:x="194402" fg:w="30"/><text x="92.4470%" y="159.50"></text></g><g><title>`0x7FFE3E6D2317 (511 samples, 0.24%)</title><rect x="91.9736%" y="181" width="0.2423%" height="15" fill="rgb(252,8,32)" fg:x="193931" fg:w="511"/><text x="92.2236%" y="191.50"></text></g><g><title>`0x7FFE3E6D21DA (547 samples, 0.26%)</title><rect x="91.9727%" y="197" width="0.2594%" height="15" fill="rgb(223,20,43)" fg:x="193929" fg:w="547"/><text x="92.2227%" y="207.50"></text></g><g><title>`0x7FFE3E6D2408 (27 samples, 0.01%)</title><rect x="92.2193%" y="181" width="0.0128%" height="15" fill="rgb(229,81,49)" fg:x="194449" fg:w="27"/><text x="92.4693%" y="191.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVec (558 samples, 0.26%)</title><rect x="91.9689%" y="229" width="0.2646%" height="15" fill="rgb(236,28,36)" fg:x="193921" fg:w="558"/><text x="92.2189%" y="239.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (556 samples, 0.26%)</title><rect x="91.9698%" y="213" width="0.2637%" height="15" fill="rgb(249,185,26)" fg:x="193923" fg:w="556"/><text x="92.2198%" y="223.50"></text></g><g><title>cli.exe`Unknown (47,270 samples, 22.42%)</title><rect x="69.8158%" y="245" width="22.4182%" height="15" fill="rgb(249,174,33)" fg:x="147210" fg:w="47270"/><text x="70.0658%" y="255.50">cli.exe`Unknown</text></g><g><title>`0x7FFE3E6D2A0F (37 samples, 0.02%)</title><rect x="92.2468%" y="181" width="0.0175%" height="15" fill="rgb(233,201,37)" fg:x="194507" fg:w="37"/><text x="92.4968%" y="191.50"></text></g><g><title>`0x7FFE3E6CD289 (37 samples, 0.02%)</title><rect x="92.2468%" y="165" width="0.0175%" height="15" fill="rgb(221,78,26)" fg:x="194507" fg:w="37"/><text x="92.4968%" y="175.50"></text></g><g><title>`0x7FFE3E7378C9 (22 samples, 0.01%)</title><rect x="92.2658%" y="165" width="0.0104%" height="15" fill="rgb(250,127,30)" fg:x="194547" fg:w="22"/><text x="92.5158%" y="175.50"></text></g><g><title>`0x7FFE3E7378CE (22 samples, 0.01%)</title><rect x="92.2762%" y="165" width="0.0104%" height="15" fill="rgb(230,49,44)" fg:x="194569" fg:w="22"/><text x="92.5262%" y="175.50"></text></g><g><title>`0x7FFE3E7378D3 (22 samples, 0.01%)</title><rect x="92.2866%" y="165" width="0.0104%" height="15" fill="rgb(229,67,23)" fg:x="194591" fg:w="22"/><text x="92.5366%" y="175.50"></text></g><g><title>`0x7FFE3E7378E2 (29 samples, 0.01%)</title><rect x="92.3042%" y="165" width="0.0138%" height="15" fill="rgb(249,83,47)" fg:x="194628" fg:w="29"/><text x="92.5542%" y="175.50"></text></g><g><title>`0x7FFE3E7378E6 (26 samples, 0.01%)</title><rect x="92.3179%" y="165" width="0.0123%" height="15" fill="rgb(215,43,3)" fg:x="194657" fg:w="26"/><text x="92.5679%" y="175.50"></text></g><g><title>`0x7FFE3E737993 (69 samples, 0.03%)</title><rect x="92.3445%" y="165" width="0.0327%" height="15" fill="rgb(238,154,13)" fg:x="194713" fg:w="69"/><text x="92.5945%" y="175.50"></text></g><g><title>`0x7FFE3E7379A3 (26 samples, 0.01%)</title><rect x="92.3824%" y="165" width="0.0123%" height="15" fill="rgb(219,56,2)" fg:x="194793" fg:w="26"/><text x="92.6324%" y="175.50"></text></g><g><title>`0x7FFE3E6D2B4E (309 samples, 0.15%)</title><rect x="92.2644%" y="181" width="0.1465%" height="15" fill="rgb(233,0,4)" fg:x="194544" fg:w="309"/><text x="92.5144%" y="191.50"></text></g><g><title>`0x7FFE3E6CCCEA (36 samples, 0.02%)</title><rect x="92.4133%" y="165" width="0.0171%" height="15" fill="rgb(235,30,7)" fg:x="194858" fg:w="36"/><text x="92.6633%" y="175.50"></text></g><g><title>`0x7FFE3E6CDC0F (25 samples, 0.01%)</title><rect x="92.4185%" y="149" width="0.0119%" height="15" fill="rgb(250,79,13)" fg:x="194869" fg:w="25"/><text x="92.6685%" y="159.50"></text></g><g><title>`0x7FFE3E6D3555 (43 samples, 0.02%)</title><rect x="92.4133%" y="181" width="0.0204%" height="15" fill="rgb(211,146,34)" fg:x="194858" fg:w="43"/><text x="92.6633%" y="191.50"></text></g><g><title>`0x7FFE3E6D21DA (419 samples, 0.20%)</title><rect x="92.2416%" y="213" width="0.1987%" height="15" fill="rgb(228,22,38)" fg:x="194496" fg:w="419"/><text x="92.4916%" y="223.50"></text></g><g><title>`0x7FFE3E6D2317 (419 samples, 0.20%)</title><rect x="92.2416%" y="197" width="0.1987%" height="15" fill="rgb(235,168,5)" fg:x="194496" fg:w="419"/><text x="92.4916%" y="207.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVec (427 samples, 0.20%)</title><rect x="92.2392%" y="245" width="0.2025%" height="15" fill="rgb(221,155,16)" fg:x="194491" fg:w="427"/><text x="92.4892%" y="255.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (426 samples, 0.20%)</title><rect x="92.2397%" y="229" width="0.2020%" height="15" fill="rgb(215,215,53)" fg:x="194492" fg:w="426"/><text x="92.4897%" y="239.50"></text></g><g><title>`0x7FFE3BC2325D (82 samples, 0.04%)</title><rect x="92.4536%" y="213" width="0.0389%" height="15" fill="rgb(223,4,10)" fg:x="194943" fg:w="82"/><text x="92.7036%" y="223.50"></text></g><g><title>cli.exe`shared::clustering::Clusterer::add_point (183,233 samples, 86.90%)</title><rect x="5.5996%" y="261" width="86.9000%" height="15" fill="rgb(234,103,6)" fg:x="11807" fg:w="183233"/><text x="5.8496%" y="271.50">cli.exe`shared::clustering::Clusterer::add_point</text></g><g><title>cli.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (122 samples, 0.06%)</title><rect x="92.4417%" y="245" width="0.0579%" height="15" fill="rgb(227,97,0)" fg:x="194918" fg:w="122"/><text x="92.6917%" y="255.50"></text></g><g><title>cli.exe`std::sys::alloc::windows::impl$0::dealloc (119 samples, 0.06%)</title><rect x="92.4431%" y="229" width="0.0564%" height="15" fill="rgb(234,150,53)" fg:x="194921" fg:w="119"/><text x="92.6931%" y="239.50"></text></g><g><title>`0x7FFE1E2613EB (295 samples, 0.14%)</title><rect x="92.5020%" y="229" width="0.1399%" height="15" fill="rgb(228,201,54)" fg:x="195045" fg:w="295"/><text x="92.7520%" y="239.50"></text></g><g><title>`0x7FFE3E6D1971 (33 samples, 0.02%)</title><rect x="92.6893%" y="197" width="0.0157%" height="15" fill="rgb(222,22,37)" fg:x="195440" fg:w="33"/><text x="92.9393%" y="207.50"></text></g><g><title>`0x7FFE3E6CDC0F (46 samples, 0.02%)</title><rect x="92.6893%" y="213" width="0.0218%" height="15" fill="rgb(237,53,32)" fg:x="195440" fg:w="46"/><text x="92.9393%" y="223.50"></text></g><g><title>`0x7FFE3E6CCCEA (74 samples, 0.04%)</title><rect x="92.6765%" y="229" width="0.0351%" height="15" fill="rgb(233,25,53)" fg:x="195413" fg:w="74"/><text x="92.9265%" y="239.50"></text></g><g><title>`0x7FFE3E6CF683 (97 samples, 0.05%)</title><rect x="92.7154%" y="213" width="0.0460%" height="15" fill="rgb(210,40,34)" fg:x="195495" fg:w="97"/><text x="92.9654%" y="223.50"></text></g><g><title>`0x7FFE3B21E160 (37 samples, 0.02%)</title><rect x="92.7690%" y="165" width="0.0175%" height="15" fill="rgb(241,220,44)" fg:x="195608" fg:w="37"/><text x="93.0190%" y="175.50"></text></g><g><title>`0x7FFE3E6D6089 (111 samples, 0.05%)</title><rect x="92.7690%" y="181" width="0.0526%" height="15" fill="rgb(235,28,35)" fg:x="195608" fg:w="111"/><text x="93.0190%" y="191.50"></text></g><g><title>`0x7FFE3E730F54 (67 samples, 0.03%)</title><rect x="92.7898%" y="165" width="0.0318%" height="15" fill="rgb(210,56,17)" fg:x="195652" fg:w="67"/><text x="93.0398%" y="175.50"></text></g><g><title>`0x7FFE3E6D62A5 (111 samples, 0.05%)</title><rect x="92.8221%" y="165" width="0.0526%" height="15" fill="rgb(224,130,29)" fg:x="195720" fg:w="111"/><text x="93.0721%" y="175.50"></text></g><g><title>`0x7FFE3E6D5D0B (228 samples, 0.11%)</title><rect x="92.7685%" y="197" width="0.1081%" height="15" fill="rgb(235,212,8)" fg:x="195607" fg:w="228"/><text x="93.0185%" y="207.50"></text></g><g><title>`0x7FFE3E6D6155 (115 samples, 0.05%)</title><rect x="92.8221%" y="181" width="0.0545%" height="15" fill="rgb(223,33,50)" fg:x="195720" fg:w="115"/><text x="93.0721%" y="191.50"></text></g><g><title>`0x7FFE3E6CFC68 (230 samples, 0.11%)</title><rect x="92.7685%" y="213" width="0.1091%" height="15" fill="rgb(219,149,13)" fg:x="195607" fg:w="230"/><text x="93.0185%" y="223.50"></text></g><g><title>cli.exe`shared::clustering::Clusterer::clusters (798 samples, 0.38%)</title><rect x="92.4996%" y="261" width="0.3785%" height="15" fill="rgb(250,156,29)" fg:x="195040" fg:w="798"/><text x="92.7496%" y="271.50"></text></g><g><title>cli.exe`&lt;alloc::vec::Vec (798 samples, 0.38%)</title><rect x="92.4996%" y="245" width="0.3785%" height="15" fill="rgb(216,193,19)" fg:x="195040" fg:w="798"/><text x="92.7496%" y="255.50"></text></g><g><title>`0x7FFE3E6CD289 (350 samples, 0.17%)</title><rect x="92.7121%" y="229" width="0.1660%" height="15" fill="rgb(216,135,14)" fg:x="195488" fg:w="350"/><text x="92.9621%" y="239.50"></text></g><g><title>cli.exe`csv_core::writer::Writer::field (76 samples, 0.04%)</title><rect x="92.8823%" y="213" width="0.0360%" height="15" fill="rgb(241,47,5)" fg:x="195847" fg:w="76"/><text x="93.1323%" y="223.50"></text></g><g><title>cli.exe`csv_core::writer::quote (76 samples, 0.04%)</title><rect x="92.8823%" y="197" width="0.0360%" height="15" fill="rgb(233,42,35)" fg:x="195847" fg:w="76"/><text x="93.1323%" y="207.50"></text></g><g><title>cli.exe`Unknown (76 samples, 0.04%)</title><rect x="92.8823%" y="181" width="0.0360%" height="15" fill="rgb(231,13,6)" fg:x="195847" fg:w="76"/><text x="93.1323%" y="191.50"></text></g><g><title>cli.exe`Unknown (76 samples, 0.04%)</title><rect x="92.8823%" y="165" width="0.0360%" height="15" fill="rgb(207,181,40)" fg:x="195847" fg:w="76"/><text x="93.1323%" y="175.50"></text></g><g><title>cli.exe`Unknown (76 samples, 0.04%)</title><rect x="92.8823%" y="149" width="0.0360%" height="15" fill="rgb(254,173,49)" fg:x="195847" fg:w="76"/><text x="93.1323%" y="159.50"></text></g><g><title>cli.exe`csv::writer::Writer (155 samples, 0.07%)</title><rect x="92.8785%" y="245" width="0.0735%" height="15" fill="rgb(221,1,38)" fg:x="195839" fg:w="155"/><text x="93.1285%" y="255.50"></text></g><g><title>cli.exe`&lt;&amp;mut csv::serializer::SeRecord (147 samples, 0.07%)</title><rect x="92.8823%" y="229" width="0.0697%" height="15" fill="rgb(206,124,46)" fg:x="195847" fg:w="147"/><text x="93.1323%" y="239.50"></text></g><g><title>cli.exe`std::io::Write::write_all (71 samples, 0.03%)</title><rect x="92.9184%" y="213" width="0.0337%" height="15" fill="rgb(249,21,11)" fg:x="195923" fg:w="71"/><text x="93.1684%" y="223.50"></text></g><g><title>cli.exe`std::fs::impl$12::write (70 samples, 0.03%)</title><rect x="92.9188%" y="197" width="0.0332%" height="15" fill="rgb(222,201,40)" fg:x="195924" fg:w="70"/><text x="93.1688%" y="207.50"></text></g><g><title>cli.exe`std::sys::pal::windows::handle::Handle::synchronous_write (70 samples, 0.03%)</title><rect x="92.9188%" y="181" width="0.0332%" height="15" fill="rgb(235,61,29)" fg:x="195924" fg:w="70"/><text x="93.1688%" y="191.50"></text></g><g><title>`0x7FFE3E730D54 (64 samples, 0.03%)</title><rect x="92.9217%" y="165" width="0.0304%" height="15" fill="rgb(219,207,3)" fg:x="195930" fg:w="64"/><text x="93.1717%" y="175.50"></text></g><g><title>cli.exe`shared::position_data::ClusterFeature::write_csv (159 samples, 0.08%)</title><rect x="92.8780%" y="261" width="0.0754%" height="15" fill="rgb(222,56,46)" fg:x="195838" fg:w="159"/><text x="93.1280%" y="271.50"></text></g><g><title>cli.exe`shared::position_data::PositionData::add_point (91 samples, 0.04%)</title><rect x="92.9535%" y="261" width="0.0432%" height="15" fill="rgb(239,76,54)" fg:x="195997" fg:w="91"/><text x="93.2035%" y="271.50"></text></g><g><title>`0x7FFE3E6D48A0 (22 samples, 0.01%)</title><rect x="93.0104%" y="181" width="0.0104%" height="15" fill="rgb(231,124,27)" fg:x="196117" fg:w="22"/><text x="93.2604%" y="191.50"></text></g><g><title>`0x7FFE3E6D476A (22 samples, 0.01%)</title><rect x="93.0104%" y="165" width="0.0104%" height="15" fill="rgb(249,195,6)" fg:x="196117" fg:w="22"/><text x="93.2604%" y="175.50"></text></g><g><title>`0x7FFE3E6D4FE9 (24 samples, 0.01%)</title><rect x="93.0104%" y="197" width="0.0114%" height="15" fill="rgb(237,174,47)" fg:x="196117" fg:w="24"/><text x="93.2604%" y="207.50"></text></g><g><title>`0x7FFE3E6D504B (38 samples, 0.02%)</title><rect x="93.0217%" y="197" width="0.0180%" height="15" fill="rgb(206,201,31)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="207.50"></text></g><g><title>`0x7FFE3E6D692A (38 samples, 0.02%)</title><rect x="93.0217%" y="181" width="0.0180%" height="15" fill="rgb(231,57,52)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="191.50"></text></g><g><title>`0x7FFE3E6D69D8 (38 samples, 0.02%)</title><rect x="93.0217%" y="165" width="0.0180%" height="15" fill="rgb(248,177,22)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="175.50"></text></g><g><title>`0x7FFE3E6D6B16 (38 samples, 0.02%)</title><rect x="93.0217%" y="149" width="0.0180%" height="15" fill="rgb(215,211,37)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="159.50"></text></g><g><title>`0x7FFE3B06D193 (38 samples, 0.02%)</title><rect x="93.0217%" y="133" width="0.0180%" height="15" fill="rgb(241,128,51)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="143.50"></text></g><g><title>`0x7FFE3B06D309 (38 samples, 0.02%)</title><rect x="93.0217%" y="117" width="0.0180%" height="15" fill="rgb(227,165,31)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="127.50"></text></g><g><title>`0x7FFE3B06D219 (38 samples, 0.02%)</title><rect x="93.0217%" y="101" width="0.0180%" height="15" fill="rgb(228,167,24)" fg:x="196141" fg:w="38"/><text x="93.2717%" y="111.50"></text></g><g><title>`0x7FFE3E731014 (35 samples, 0.02%)</title><rect x="93.0232%" y="85" width="0.0166%" height="15" fill="rgb(228,143,12)" fg:x="196144" fg:w="35"/><text x="93.2732%" y="95.50"></text></g><g><title>`0x7FFE3E6C9C58 (83 samples, 0.04%)</title><rect x="93.0104%" y="213" width="0.0394%" height="15" fill="rgb(249,149,8)" fg:x="196117" fg:w="83"/><text x="93.2604%" y="223.50"></text></g><g><title>`0x7FFE3E6CC374 (100 samples, 0.05%)</title><rect x="93.0037%" y="229" width="0.0474%" height="15" fill="rgb(243,35,44)" fg:x="196103" fg:w="100"/><text x="93.2537%" y="239.50"></text></g><g><title>`0x7FFE3E6CB041 (135 samples, 0.06%)</title><rect x="93.0037%" y="245" width="0.0640%" height="15" fill="rgb(246,89,9)" fg:x="196103" fg:w="135"/><text x="93.2537%" y="255.50"></text></g><g><title>cli.exe`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter (773 samples, 0.37%)</title><rect x="93.0677%" y="245" width="0.3666%" height="15" fill="rgb(233,213,13)" fg:x="196238" fg:w="773"/><text x="93.3177%" y="255.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVecInner (22 samples, 0.01%)</title><rect x="93.4239%" y="229" width="0.0104%" height="15" fill="rgb(233,141,41)" fg:x="196989" fg:w="22"/><text x="93.6739%" y="239.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (22 samples, 0.01%)</title><rect x="93.4239%" y="213" width="0.0104%" height="15" fill="rgb(239,167,4)" fg:x="196989" fg:w="22"/><text x="93.6739%" y="223.50"></text></g><g><title>`0x7FFE3E6D1B64 (29 samples, 0.01%)</title><rect x="93.4652%" y="133" width="0.0138%" height="15" fill="rgb(209,217,16)" fg:x="197076" fg:w="29"/><text x="93.7152%" y="143.50"></text></g><g><title>`0x7FFE3E6D1CF3 (29 samples, 0.01%)</title><rect x="93.4652%" y="117" width="0.0138%" height="15" fill="rgb(219,88,35)" fg:x="197076" fg:w="29"/><text x="93.7152%" y="127.50"></text></g><g><title>`0x7FFE3E6CCCEA (91 samples, 0.04%)</title><rect x="93.4519%" y="165" width="0.0432%" height="15" fill="rgb(220,193,23)" fg:x="197048" fg:w="91"/><text x="93.7019%" y="175.50"></text></g><g><title>`0x7FFE3E6CDC0F (75 samples, 0.04%)</title><rect x="93.4595%" y="149" width="0.0356%" height="15" fill="rgb(230,90,52)" fg:x="197064" fg:w="75"/><text x="93.7095%" y="159.50"></text></g><g><title>`0x7FFE3E6D1B6F (34 samples, 0.02%)</title><rect x="93.4789%" y="133" width="0.0161%" height="15" fill="rgb(252,106,19)" fg:x="197105" fg:w="34"/><text x="93.7289%" y="143.50"></text></g><g><title>`0x7FFE3E6D1CF3 (33 samples, 0.02%)</title><rect x="93.4794%" y="117" width="0.0157%" height="15" fill="rgb(206,74,20)" fg:x="197106" fg:w="33"/><text x="93.7294%" y="127.50"></text></g><g><title>cli.exe`Unknown (113 samples, 0.05%)</title><rect x="93.4434%" y="197" width="0.0536%" height="15" fill="rgb(230,138,44)" fg:x="197030" fg:w="113"/><text x="93.6934%" y="207.50"></text></g><g><title>cli.exe`wkt::geo_types_to_wkt::g_points_to_w_linestring (113 samples, 0.05%)</title><rect x="93.4434%" y="181" width="0.0536%" height="15" fill="rgb(235,182,43)" fg:x="197030" fg:w="113"/><text x="93.6934%" y="191.50"></text></g><g><title>cli.exe`&lt;core::iter::adapters::map::Map (133 samples, 0.06%)</title><rect x="93.4344%" y="245" width="0.0631%" height="15" fill="rgb(242,16,51)" fg:x="197011" fg:w="133"/><text x="93.6844%" y="255.50"></text></g><g><title>cli.exe`wkt::geo_types_to_wkt::g_polygon_to_w_polygon (133 samples, 0.06%)</title><rect x="93.4344%" y="229" width="0.0631%" height="15" fill="rgb(248,9,4)" fg:x="197011" fg:w="133"/><text x="93.6844%" y="239.50"></text></g><g><title>cli.exe`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter (132 samples, 0.06%)</title><rect x="93.4348%" y="213" width="0.0626%" height="15" fill="rgb(210,31,22)" fg:x="197012" fg:w="132"/><text x="93.6848%" y="223.50"></text></g><g><title>cli.exe`core::ptr::drop_in_place (25 samples, 0.01%)</title><rect x="93.4979%" y="245" width="0.0119%" height="15" fill="rgb(239,54,39)" fg:x="197145" fg:w="25"/><text x="93.7479%" y="255.50"></text></g><g><title>`0x7FFE3E6CCCEA (44 samples, 0.02%)</title><rect x="98.8053%" y="213" width="0.0209%" height="15" fill="rgb(230,99,41)" fg:x="208336" fg:w="44"/><text x="99.0553%" y="223.50"></text></g><g><title>`0x7FFE3E6D1CF3 (147 samples, 0.07%)</title><rect x="98.9249%" y="85" width="0.0697%" height="15" fill="rgb(253,106,12)" fg:x="208588" fg:w="147"/><text x="99.1749%" y="95.50"></text></g><g><title>`0x7FFE3E6D1B64 (150 samples, 0.07%)</title><rect x="98.9249%" y="101" width="0.0711%" height="15" fill="rgb(213,46,41)" fg:x="208588" fg:w="150"/><text x="99.1749%" y="111.50"></text></g><g><title>`0x7FFE3E6D1CF3 (166 samples, 0.08%)</title><rect x="98.9969%" y="85" width="0.0787%" height="15" fill="rgb(215,133,35)" fg:x="208740" fg:w="166"/><text x="99.2469%" y="95.50"></text></g><g><title>`0x7FFE3E6D1B6F (169 samples, 0.08%)</title><rect x="98.9960%" y="101" width="0.0801%" height="15" fill="rgb(213,28,5)" fg:x="208738" fg:w="169"/><text x="99.2460%" y="111.50"></text></g><g><title>`0x7FFE3E6CDC0F (336 samples, 0.16%)</title><rect x="98.9173%" y="117" width="0.1594%" height="15" fill="rgb(215,77,49)" fg:x="208572" fg:w="336"/><text x="99.1673%" y="127.50"></text></g><g><title>`0x7FFE3E6CCCEA (466 samples, 0.22%)</title><rect x="98.8561%" y="133" width="0.2210%" height="15" fill="rgb(248,100,22)" fg:x="208443" fg:w="466"/><text x="99.1061%" y="143.50"></text></g><g><title>`0x7FFE3E6D3555 (490 samples, 0.23%)</title><rect x="98.8466%" y="149" width="0.2324%" height="15" fill="rgb(208,67,9)" fg:x="208423" fg:w="490"/><text x="99.0966%" y="159.50"></text></g><g><title>`0x7FFE3E6CB041 (55 samples, 0.03%)</title><rect x="99.0908%" y="133" width="0.0261%" height="15" fill="rgb(219,133,21)" fg:x="208938" fg:w="55"/><text x="99.3408%" y="143.50"></text></g><g><title>`0x7FFE3E6D35B2 (59 samples, 0.03%)</title><rect x="99.0899%" y="149" width="0.0280%" height="15" fill="rgb(246,46,29)" fg:x="208936" fg:w="59"/><text x="99.3399%" y="159.50"></text></g><g><title>`0x7FFE3E6D2317 (595 samples, 0.28%)</title><rect x="98.8381%" y="165" width="0.2822%" height="15" fill="rgb(246,185,52)" fg:x="208405" fg:w="595"/><text x="99.0881%" y="175.50"></text></g><g><title>`0x7FFE3E6D21DA (606 samples, 0.29%)</title><rect x="98.8343%" y="181" width="0.2874%" height="15" fill="rgb(252,136,11)" fg:x="208397" fg:w="606"/><text x="99.0843%" y="191.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVecInner (627 samples, 0.30%)</title><rect x="98.8262%" y="213" width="0.2974%" height="15" fill="rgb(219,138,53)" fg:x="208380" fg:w="627"/><text x="99.0762%" y="223.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (616 samples, 0.29%)</title><rect x="98.8314%" y="197" width="0.2921%" height="15" fill="rgb(211,51,23)" fg:x="208391" fg:w="616"/><text x="99.0814%" y="207.50"></text></g><g><title>cli.exe`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter (2,686 samples, 1.27%)</title><rect x="97.8511%" y="229" width="1.2739%" height="15" fill="rgb(247,221,28)" fg:x="206324" fg:w="2686"/><text x="98.1011%" y="239.50"></text></g><g><title>cli.exe`Unknown (27 samples, 0.01%)</title><rect x="99.1719%" y="181" width="0.0128%" height="15" fill="rgb(251,222,45)" fg:x="209109" fg:w="27"/><text x="99.4219%" y="191.50"></text></g><g><title>`0x7FFE3E6D3555 (26 samples, 0.01%)</title><rect x="99.1900%" y="117" width="0.0123%" height="15" fill="rgb(217,162,53)" fg:x="209147" fg:w="26"/><text x="99.4400%" y="127.50"></text></g><g><title>`0x7FFE3E6CCCEA (25 samples, 0.01%)</title><rect x="99.1904%" y="101" width="0.0119%" height="15" fill="rgb(229,93,14)" fg:x="209148" fg:w="25"/><text x="99.4404%" y="111.50"></text></g><g><title>`0x7FFE3E6D2317 (30 samples, 0.01%)</title><rect x="99.1900%" y="133" width="0.0142%" height="15" fill="rgb(209,67,49)" fg:x="209147" fg:w="30"/><text x="99.4400%" y="143.50"></text></g><g><title>`0x7FFE3E6D21DA (31 samples, 0.01%)</title><rect x="99.1900%" y="149" width="0.0147%" height="15" fill="rgb(213,87,29)" fg:x="209147" fg:w="31"/><text x="99.4400%" y="159.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVec (43 samples, 0.02%)</title><rect x="99.1847%" y="181" width="0.0204%" height="15" fill="rgb(205,151,52)" fg:x="209136" fg:w="43"/><text x="99.4347%" y="191.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (43 samples, 0.02%)</title><rect x="99.1847%" y="165" width="0.0204%" height="15" fill="rgb(253,215,39)" fg:x="209136" fg:w="43"/><text x="99.4347%" y="175.50"></text></g><g><title>cli.exe`Unknown (142 samples, 0.07%)</title><rect x="99.1606%" y="197" width="0.0673%" height="15" fill="rgb(221,220,41)" fg:x="209085" fg:w="142"/><text x="99.4106%" y="207.50"></text></g><g><title>cli.exe`geo::utils::partition_slice (48 samples, 0.02%)</title><rect x="99.2051%" y="181" width="0.0228%" height="15" fill="rgb(218,133,21)" fg:x="209179" fg:w="48"/><text x="99.4551%" y="191.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVec (35 samples, 0.02%)</title><rect x="99.2279%" y="197" width="0.0166%" height="15" fill="rgb(221,193,43)" fg:x="209227" fg:w="35"/><text x="99.4779%" y="207.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (34 samples, 0.02%)</title><rect x="99.2284%" y="181" width="0.0161%" height="15" fill="rgb(240,128,52)" fg:x="209228" fg:w="34"/><text x="99.4784%" y="191.50"></text></g><g><title>`0x7FFE3E6D21DA (28 samples, 0.01%)</title><rect x="99.2312%" y="165" width="0.0133%" height="15" fill="rgb(253,114,12)" fg:x="209234" fg:w="28"/><text x="99.4812%" y="175.50"></text></g><g><title>`0x7FFE3E6D2317 (27 samples, 0.01%)</title><rect x="99.2317%" y="149" width="0.0128%" height="15" fill="rgb(215,223,47)" fg:x="209235" fg:w="27"/><text x="99.4817%" y="159.50"></text></g><g><title>cli.exe`Unknown (455 samples, 0.22%)</title><rect x="99.1307%" y="213" width="0.2158%" height="15" fill="rgb(248,225,23)" fg:x="209022" fg:w="455"/><text x="99.3807%" y="223.50"></text></g><g><title>cli.exe`geo::utils::partition_slice (215 samples, 0.10%)</title><rect x="99.2445%" y="197" width="0.1020%" height="15" fill="rgb(250,108,0)" fg:x="209262" fg:w="215"/><text x="99.4945%" y="207.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVec (23 samples, 0.01%)</title><rect x="99.3465%" y="213" width="0.0109%" height="15" fill="rgb(228,208,7)" fg:x="209477" fg:w="23"/><text x="99.5965%" y="223.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (23 samples, 0.01%)</title><rect x="99.3465%" y="197" width="0.0109%" height="15" fill="rgb(244,45,10)" fg:x="209477" fg:w="23"/><text x="99.5965%" y="207.50"></text></g><g><title>cli.exe`geo::utils::least_and_greatest_index (126 samples, 0.06%)</title><rect x="99.3659%" y="213" width="0.0598%" height="15" fill="rgb(207,125,25)" fg:x="209518" fg:w="126"/><text x="99.6159%" y="223.50"></text></g><g><title>cli.exe`geo::algorithm::convex_hull::qhull::quick_hull (835 samples, 0.40%)</title><rect x="99.1250%" y="229" width="0.3960%" height="15" fill="rgb(210,195,18)" fg:x="209010" fg:w="835"/><text x="99.3750%" y="239.50"></text></g><g><title>cli.exe`geo::utils::partition_slice (201 samples, 0.10%)</title><rect x="99.4257%" y="213" width="0.0953%" height="15" fill="rgb(249,80,12)" fg:x="209644" fg:w="201"/><text x="99.6757%" y="223.50"></text></g><g><title>cli.exe`shared::position_data::PositionData::geometry_from_cluster (12,676 samples, 6.01%)</title><rect x="93.5098%" y="245" width="6.0117%" height="15" fill="rgb(221,65,9)" fg:x="197170" fg:w="12676"/><text x="93.7598%" y="255.50">cli.exe`..</text></g><g><title>`0x7FFE3E6D2B4E (29 samples, 0.01%)</title><rect x="99.5926%" y="69" width="0.0138%" height="15" fill="rgb(235,49,36)" fg:x="209996" fg:w="29"/><text x="99.8426%" y="79.50"></text></g><g><title>`0x7FFE3E6D21DA (34 samples, 0.02%)</title><rect x="99.5912%" y="101" width="0.0161%" height="15" fill="rgb(225,32,20)" fg:x="209993" fg:w="34"/><text x="99.8412%" y="111.50"></text></g><g><title>`0x7FFE3E6D2317 (34 samples, 0.02%)</title><rect x="99.5912%" y="85" width="0.0161%" height="15" fill="rgb(215,141,46)" fg:x="209993" fg:w="34"/><text x="99.8412%" y="95.50"></text></g><g><title>cli.exe`alloc::raw_vec::RawVecInner (35 samples, 0.02%)</title><rect x="99.5912%" y="133" width="0.0166%" height="15" fill="rgb(250,160,47)" fg:x="209993" fg:w="35"/><text x="99.8412%" y="143.50"></text></g><g><title>cli.exe`alloc::raw_vec::finish_grow (35 samples, 0.02%)</title><rect x="99.5912%" y="117" width="0.0166%" height="15" fill="rgb(216,222,40)" fg:x="209993" fg:w="35"/><text x="99.8412%" y="127.50"></text></g><g><title>cli.exe`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (73 samples, 0.03%)</title><rect x="99.5774%" y="149" width="0.0346%" height="15" fill="rgb(234,217,39)" fg:x="209964" fg:w="73"/><text x="99.8274%" y="159.50"></text></g><g><title>cli.exe`core::fmt::Formatter::write_formatted_parts (95 samples, 0.05%)</title><rect x="99.5717%" y="165" width="0.0451%" height="15" fill="rgb(207,178,40)" fg:x="209952" fg:w="95"/><text x="99.8217%" y="175.50"></text></g><g><title>cli.exe`core::num::flt2dec::strategy::grisu::cached_power (24 samples, 0.01%)</title><rect x="99.7173%" y="101" width="0.0114%" height="15" fill="rgb(221,136,13)" fg:x="210259" fg:w="24"/><text x="99.9673%" y="111.50"></text></g><g><title>cli.exe`core::num::flt2dec::strategy::grisu::format_shortest_opt::round_and_weed (25 samples, 0.01%)</title><rect x="99.7287%" y="101" width="0.0119%" height="15" fill="rgb(249,199,10)" fg:x="210283" fg:w="25"/><text x="99.9787%" y="111.50"></text></g><g><title>cli.exe`core::fmt::float::float_to_decimal_common_shortest&lt;f64&gt; (371 samples, 0.18%)</title><rect x="99.5661%" y="181" width="0.1760%" height="15" fill="rgb(249,222,13)" fg:x="209940" fg:w="371"/><text x="99.8161%" y="191.50"></text></g><g><title>cli.exe`core::num::flt2dec::to_shortest_str (264 samples, 0.13%)</title><rect x="99.6168%" y="165" width="0.1252%" height="15" fill="rgb(244,185,38)" fg:x="210047" fg:w="264"/><text x="99.8668%" y="175.50"></text></g><g><title>cli.exe`core::ops::function::FnMut::call_mut (221 samples, 0.10%)</title><rect x="99.6372%" y="149" width="0.1048%" height="15" fill="rgb(236,202,9)" fg:x="210090" fg:w="221"/><text x="99.8872%" y="159.50"></text></g><g><title>cli.exe`core::num::flt2dec::strategy::grisu::format_shortest (221 samples, 0.10%)</title><rect x="99.6372%" y="133" width="0.1048%" height="15" fill="rgb(250,229,37)" fg:x="210090" fg:w="221"/><text x="99.8872%" y="143.50"></text></g><g><title>cli.exe`core::num::flt2dec::strategy::grisu::format_shortest_opt (203 samples, 0.10%)</title><rect x="99.6457%" y="117" width="0.0963%" height="15" fill="rgb(206,174,23)" fg:x="210108" fg:w="203"/><text x="99.8957%" y="127.50"></text></g><g><title>cli.exe`shared::position_data::PositionData::features_from_clusters (14,225 samples, 6.75%)</title><rect x="92.9966%" y="261" width="6.7463%" height="15" fill="rgb(211,33,43)" fg:x="196088" fg:w="14225"/><text x="93.2466%" y="271.50">cli.exe`s..</text></g><g><title>cli.exe`wkt::to_wkt::geo_trait_impl::write_multi_polygon (466 samples, 0.22%)</title><rect x="99.5219%" y="245" width="0.2210%" height="15" fill="rgb(245,58,50)" fg:x="209847" fg:w="466"/><text x="99.7719%" y="255.50"></text></g><g><title>cli.exe`Unknown (448 samples, 0.21%)</title><rect x="99.5305%" y="229" width="0.2125%" height="15" fill="rgb(244,68,36)" fg:x="209865" fg:w="448"/><text x="99.7805%" y="239.50"></text></g><g><title>cli.exe`wkt::to_wkt::geo_trait_impl::write_coord (429 samples, 0.20%)</title><rect x="99.5395%" y="213" width="0.2035%" height="15" fill="rgb(232,229,15)" fg:x="209884" fg:w="429"/><text x="99.7895%" y="223.50"></text></g><g><title>cli.exe`core::fmt::write (396 samples, 0.19%)</title><rect x="99.5551%" y="197" width="0.1878%" height="15" fill="rgb(254,30,23)" fg:x="209917" fg:w="396"/><text x="99.8051%" y="207.50"></text></g><g><title>cli.exe`shared::position_data::PositionData::new (26 samples, 0.01%)</title><rect x="99.7430%" y="261" width="0.0123%" height="15" fill="rgb(235,160,14)" fg:x="210313" fg:w="26"/><text x="99.9930%" y="271.50"></text></g><g><title>cli.exe`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (26 samples, 0.01%)</title><rect x="99.7430%" y="245" width="0.0123%" height="15" fill="rgb(212,155,44)" fg:x="210313" fg:w="26"/><text x="99.9930%" y="255.50"></text></g><g><title>`0x7FFE3E6CCCEA (26 samples, 0.01%)</title><rect x="99.7430%" y="229" width="0.0123%" height="15" fill="rgb(226,2,50)" fg:x="210313" fg:w="26"/><text x="99.9930%" y="239.50"></text></g><g><title>cli.exe`csv_core::writer::Writer::field (43 samples, 0.02%)</title><rect x="99.7871%" y="213" width="0.0204%" height="15" fill="rgb(234,177,6)" fg:x="210406" fg:w="43"/><text x="100.0371%" y="223.50"></text></g><g><title>cli.exe`Unknown (36 samples, 0.02%)</title><rect x="99.8516%" y="197" width="0.0171%" height="15" fill="rgb(217,24,9)" fg:x="210542" fg:w="36"/><text x="100.1016%" y="207.50"></text></g><g><title>cli.exe`ryu::pretty::format64 (131 samples, 0.06%)</title><rect x="99.8075%" y="213" width="0.0621%" height="15" fill="rgb(220,13,46)" fg:x="210449" fg:w="131"/><text x="100.0575%" y="223.50"></text></g><g><title>cli.exe`&lt;&amp;mut csv::serializer::SeRecord (289 samples, 0.14%)</title><rect x="99.7614%" y="229" width="0.1371%" height="15" fill="rgb(239,221,27)" fg:x="210352" fg:w="289"/><text x="100.0114%" y="239.50"></text></g><g><title>cli.exe`std::io::Write::write_all (61 samples, 0.03%)</title><rect x="99.8696%" y="213" width="0.0289%" height="15" fill="rgb(222,198,25)" fg:x="210580" fg:w="61"/><text x="100.1196%" y="223.50"></text></g><g><title>cli.exe`std::fs::impl$12::write (61 samples, 0.03%)</title><rect x="99.8696%" y="197" width="0.0289%" height="15" fill="rgb(211,99,13)" fg:x="210580" fg:w="61"/><text x="100.1196%" y="207.50"></text></g><g><title>cli.exe`std::sys::pal::windows::handle::Handle::synchronous_write (61 samples, 0.03%)</title><rect x="99.8696%" y="181" width="0.0289%" height="15" fill="rgb(232,111,31)" fg:x="210580" fg:w="61"/><text x="100.1196%" y="191.50"></text></g><g><title>`0x7FFE3E730D54 (54 samples, 0.03%)</title><rect x="99.8729%" y="165" width="0.0256%" height="15" fill="rgb(245,82,37)" fg:x="210587" fg:w="54"/><text x="100.1229%" y="175.50"></text></g><g><title>cli.exe`csv::writer::Writer (297 samples, 0.14%)</title><rect x="99.7610%" y="245" width="0.1409%" height="15" fill="rgb(227,149,46)" fg:x="210351" fg:w="297"/><text x="100.0110%" y="255.50"></text></g><g><title>cli.exe`shared::position_data::PositionData::write_csv (312 samples, 0.15%)</title><rect x="99.7553%" y="261" width="0.1480%" height="15" fill="rgb(218,36,50)" fg:x="210339" fg:w="312"/><text x="100.0053%" y="271.50"></text></g><g><title>cli.exe`shared::trace::TraceParser::new (24 samples, 0.01%)</title><rect x="99.9033%" y="261" width="0.0114%" height="15" fill="rgb(226,80,48)" fg:x="210651" fg:w="24"/><text x="100.1533%" y="271.50"></text></g><g><title>cli.exe`std::io::stdio::impl$16::write_fmt (24 samples, 0.01%)</title><rect x="99.9170%" y="229" width="0.0114%" height="15" fill="rgb(238,224,15)" fg:x="210680" fg:w="24"/><text x="100.1670%" y="239.50"></text></g><g><title>cli.exe`std::io::Write::write_fmt (24 samples, 0.01%)</title><rect x="99.9170%" y="213" width="0.0114%" height="15" fill="rgb(241,136,10)" fg:x="210680" fg:w="24"/><text x="100.1670%" y="223.50"></text></g><g><title>cli.exe`std::io::default_write_fmt (24 samples, 0.01%)</title><rect x="99.9170%" y="197" width="0.0114%" height="15" fill="rgb(208,32,45)" fg:x="210680" fg:w="24"/><text x="100.1670%" y="207.50"></text></g><g><title>cli.exe`core::fmt::write (24 samples, 0.01%)</title><rect x="99.9170%" y="181" width="0.0114%" height="15" fill="rgb(207,135,9)" fg:x="210680" fg:w="24"/><text x="100.1670%" y="191.50"></text></g><g><title>cli.exe`std::io::stdio::_print (25 samples, 0.01%)</title><rect x="99.9170%" y="261" width="0.0119%" height="15" fill="rgb(206,86,44)" fg:x="210680" fg:w="25"/><text x="100.1670%" y="271.50"></text></g><g><title>cli.exe`std::io::stdio::print_to (25 samples, 0.01%)</title><rect x="99.9170%" y="245" width="0.0119%" height="15" fill="rgb(245,177,15)" fg:x="210680" fg:w="25"/><text x="100.1670%" y="255.50"></text></g><g><title>`0x7FFE3E6EAF78 (210,690 samples, 99.92%)</title><rect x="0.0076%" y="469" width="99.9217%" height="15" fill="rgb(206,64,50)" fg:x="16" fg:w="210690"/><text x="0.2576%" y="479.50">`0x7FFE3E6EAF78</text></g><g><title>`0x7FFE3C9A259D (210,690 samples, 99.92%)</title><rect x="0.0076%" y="453" width="99.9217%" height="15" fill="rgb(234,36,40)" fg:x="16" fg:w="210690"/><text x="0.2576%" y="463.50">`0x7FFE3C9A259D</text></g><g><title>cli.exe`__scrt_common_main_seh() (210,669 samples, 99.91%)</title><rect x="0.0175%" y="437" width="99.9118%" height="15" fill="rgb(213,64,8)" fg:x="37" fg:w="210669"/><text x="0.2675%" y="447.50">cli.exe`__scrt_common_main_seh()</text></g><g><title>cli.exe`invoke_main() (210,658 samples, 99.91%)</title><rect x="0.0228%" y="421" width="99.9066%" height="15" fill="rgb(210,75,36)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="431.50">cli.exe`invoke_main()</text></g><g><title>cli.exe`main (210,658 samples, 99.91%)</title><rect x="0.0228%" y="405" width="99.9066%" height="15" fill="rgb(229,88,21)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="415.50">cli.exe`main</text></g><g><title>cli.exe`std::rt::lang_start_internal (210,658 samples, 99.91%)</title><rect x="0.0228%" y="389" width="99.9066%" height="15" fill="rgb(252,204,47)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="399.50">cli.exe`std::rt::lang_start_internal</text></g><g><title>cli.exe`std::panic::catch_unwind (210,658 samples, 99.91%)</title><rect x="0.0228%" y="373" width="99.9066%" height="15" fill="rgb(208,77,27)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="383.50">cli.exe`std::panic::catch_unwind</text></g><g><title>cli.exe`std::panicking::try (210,658 samples, 99.91%)</title><rect x="0.0228%" y="357" width="99.9066%" height="15" fill="rgb(221,76,26)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="367.50">cli.exe`std::panicking::try</text></g><g><title>cli.exe`std::panicking::try::do_call (210,658 samples, 99.91%)</title><rect x="0.0228%" y="341" width="99.9066%" height="15" fill="rgb(225,139,18)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="351.50">cli.exe`std::panicking::try::do_call</text></g><g><title>cli.exe`std::rt::lang_start_internal::closure$0 (210,658 samples, 99.91%)</title><rect x="0.0228%" y="325" width="99.9066%" height="15" fill="rgb(230,137,11)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="335.50">cli.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>cli.exe`std::rt::lang_start::{{closure}} (210,658 samples, 99.91%)</title><rect x="0.0228%" y="309" width="99.9066%" height="15" fill="rgb(212,28,1)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="319.50">cli.exe`std::rt::lang_start::{{closure}}</text></g><g><title>cli.exe`std::sys::backtrace::__rust_begin_short_backtrace (210,658 samples, 99.91%)</title><rect x="0.0228%" y="293" width="99.9066%" height="15" fill="rgb(248,164,17)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="303.50">cli.exe`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>cli.exe`Unknown (210,658 samples, 99.91%)</title><rect x="0.0228%" y="277" width="99.9066%" height="15" fill="rgb(222,171,42)" fg:x="48" fg:w="210658"/><text x="0.2728%" y="287.50">cli.exe`Unknown</text></g><g><title>`0x7FFE3AFFA77A (40 samples, 0.02%)</title><rect x="99.9478%" y="261" width="0.0190%" height="15" fill="rgb(243,84,45)" fg:x="210745" fg:w="40"/><text x="100.1978%" y="271.50"></text></g><g><title>`0x7FFE3AFFA261 (106 samples, 0.05%)</title><rect x="99.9464%" y="341" width="0.0503%" height="15" fill="rgb(252,49,23)" fg:x="210742" fg:w="106"/><text x="100.1964%" y="351.50"></text></g><g><title>`0x7FFE3B1914A7 (103 samples, 0.05%)</title><rect x="99.9478%" y="325" width="0.0488%" height="15" fill="rgb(215,19,7)" fg:x="210745" fg:w="103"/><text x="100.1978%" y="335.50"></text></g><g><title>`0x7FFE3AFFA58D (103 samples, 0.05%)</title><rect x="99.9478%" y="309" width="0.0488%" height="15" fill="rgb(238,81,41)" fg:x="210745" fg:w="103"/><text x="100.1978%" y="319.50"></text></g><g><title>`0x7FFE3AFFBC99 (103 samples, 0.05%)</title><rect x="99.9478%" y="293" width="0.0488%" height="15" fill="rgb(210,199,37)" fg:x="210745" fg:w="103"/><text x="100.1978%" y="303.50"></text></g><g><title>`0x7FFE3AFFBAFC (103 samples, 0.05%)</title><rect x="99.9478%" y="277" width="0.0488%" height="15" fill="rgb(244,192,49)" fg:x="210745" fg:w="103"/><text x="100.1978%" y="287.50"></text></g><g><title>`0x7FFE3E6FD42E (109 samples, 0.05%)</title><rect x="99.9455%" y="389" width="0.0517%" height="15" fill="rgb(226,211,11)" fg:x="210740" fg:w="109"/><text x="100.1955%" y="399.50"></text></g><g><title>`0x7FFE3E6FD67D (109 samples, 0.05%)</title><rect x="99.9455%" y="373" width="0.0517%" height="15" fill="rgb(236,162,54)" fg:x="210740" fg:w="109"/><text x="100.1955%" y="383.50"></text></g><g><title>`0x7FFE3E6B8BCF (109 samples, 0.05%)</title><rect x="99.9455%" y="357" width="0.0517%" height="15" fill="rgb(220,229,9)" fg:x="210740" fg:w="109"/><text x="100.1955%" y="367.50"></text></g><g><title>`0x7FFE3E70448E (148 samples, 0.07%)</title><rect x="99.9293%" y="469" width="0.0702%" height="15" fill="rgb(250,87,22)" fg:x="210706" fg:w="148"/><text x="100.1793%" y="479.50"></text></g><g><title>`0x7FFE3E704563 (148 samples, 0.07%)</title><rect x="99.9293%" y="453" width="0.0702%" height="15" fill="rgb(239,43,17)" fg:x="210706" fg:w="148"/><text x="100.1793%" y="463.50"></text></g><g><title>`0x7FFE3E75B38C (147 samples, 0.07%)</title><rect x="99.9298%" y="437" width="0.0697%" height="15" fill="rgb(231,177,25)" fg:x="210707" fg:w="147"/><text x="100.1798%" y="447.50"></text></g><g><title>`0x7FFE3E76F4B9 (114 samples, 0.05%)</title><rect x="99.9455%" y="421" width="0.0541%" height="15" fill="rgb(219,179,1)" fg:x="210740" fg:w="114"/><text x="100.1955%" y="431.50"></text></g><g><title>`0x7FFE3E6FD4A0 (114 samples, 0.05%)</title><rect x="99.9455%" y="405" width="0.0541%" height="15" fill="rgb(238,219,53)" fg:x="210740" fg:w="114"/><text x="100.1955%" y="415.50"></text></g><g><title>all (210,855 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="210855"/><text x="0.2500%" y="495.50"></text></g></svg></svg>